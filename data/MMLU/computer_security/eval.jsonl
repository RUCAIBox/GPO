{"input": "In Message Condentiality, the transmitted message must make sense to only intended\n(A) Receiver\n(B) Sender\n(C) Modulor\n(D) Translator", "output": "(A)"}
{"input": "Assume that a TLS connection has been established successfully between a client and a server. Establishing the session included checking the server certificate and executing a DiffieHelmann exchange, but the client did not provide a client certificate. Further, assume that the client and server are honest, that the client and server don’t leak their keys, and that the cryptography is good. Which of the following attacks does TLS protect against?\n1. An attacker replacing bytes sent by a client with bytes of the attacker’s own choosing.\n2. An attacker reading the plaintext bytes sent by a client.\n(A) True, True\n(B) False, False\n(C) True, False\n(D) False, True", "output": "(A)"}
{"input": "Buffer-overflow may remain as a bug in apps if __________ are not done fully.\n(A) boundary hacks\n(B) memory checks\n(C) boundary checks\n(D) buffer checks", "output": "(C)"}
{"input": "Which of the following deals with network intrusion detection and real-time traffic analysis?\n(A) John the Ripper\n(B) L0phtCrack\n(C) Snort\n(D) Nessus", "output": "(C)"}
{"input": "To verify a digital signature we need the\n(A) Sender’s Private key\n(B) Sender’s Public key\n(C) Receiver’s Private key\n(D) Receiver’s Public key", "output": "(B)"}
{"input": "How is IP address spoofing detected?\n(A) Installing and configuring a IDS that can read the IP header\n(B) Comparing the TTL values of the actual and spoofed addresses\n(C) Implementing a firewall to the network\n(D) Identify all TCP sessions that are initiated but does not complete successfully", "output": "(B)"}
{"input": "What is a web proxy?\n(A) A piece of software that intercepts and possibly modifies requests (and responses) between a web browser and web server\n(B) An agent that makes decisions on the client's behalf when interacting with web applications\n(C) A piece of software that makes a web application look like a standalone application, making it easier to test\n(D) A simulator for the web, for use when off-line", "output": "(A)"}
{"input": "Which of the following is an authentication method?\n(A) Secret question\n(B) Biometric\n(C) SMS code\n(D) All of the above", "output": "(D)"}
{"input": "The openSSL implementation described in “Remote Timing Attacks are Practical” (by Brumley and Boneh) uses the following performance optimizations: Chinese Remainder (CR), Montgomery Representation (MR), Karatsuba Multiplication (KM), and Repeated squaring and Sliding windows (RS). Which of the following options would close the timing channel attack described in the paper if you turned the listed optimizations off?\n1. RS and KM\n2. RS and MR\n(A) True, True\n(B) False, False\n(C) True, False\n(D) False, True", "output": "(D)"}
{"input": "When the data must arrive at the receiver exactly as they were sent, its called\n(A) Message Condentiality\n(B) Message Integrity\n(C) Message Splashing\n(D) Message Sending", "output": "(B)"}
{"input": "What is a nop sled\n(A) It is an anonymous version of a mop sled\n(B) It is a sequence of nops preceding injected shellcode, useful when the return address is unknown\n(C) It is a method of removing zero bytes from shellcode\n(D) It is another name for a branch instruction at the end of sequence of nops", "output": "(B)"}
{"input": "What are the types of scanning?\n(A) Port, network, and services\n(B) Network, vulnerability, and port \n(C) Passive, active, and interactive\n(D) Server, client, and network", "output": "(B)"}
{"input": "Old operating systems like _______ and NT-based systems have buffer-overflow attack a common vulnerability.\n(A) Windows 7\n(B) Chrome\n(C) IOS12\n(D) UNIX", "output": "(D)"}
{"input": "Which among them has the strongest wireless security?\n(A) WEP\n(B) WPA\n(C) WPA2\n(D) WPA3", "output": "(D)"}
{"input": "What are the port states determined by Nmap?\n(A) Active, inactive, standby\n(B) Open, half-open, closed \n(C) Open, filtered, unfiltered\n(D) Active, closed, unused", "output": "(C)"}
{"input": "You are given a message (m) and its OTP encryption (c). Can you compute the OTP key from m and c ?\n(A) No, I cannot compute the key.\n(B) Yes, the key is k = m xor c.\n(C) I can only compute half the bits of the key.\n(D) Yes, the key is k = m xor m.", "output": "(B)"}
{"input": "Which of the following is true of mutation-based fuzzing?\n(A) It generates each different input by modifying a prior input\n(B) It works by making small mutations to the target program to induce faults\n(C) Each input is mutation that follows a given grammar\n(D) It only makes sense for file-based fuzzing, not network-based fuzzing", "output": "(A)"}
{"input": "A session symmetric key between two parties is used\n(A) Only once\n(B) Twice\n(C) Multiple times\n(D) Conditions dependant", "output": "(A)"}
{"input": "A sender must not be able to deny sending a message that was sent, is known as\n(A) Message Nonrepudiation\n(B) Message Integrity\n(C) Message Condentiality\n(D) Message Sending", "output": "(A)"}
{"input": "A packet filter firewall filters at the\n(A) Application or transport\n(B) Data link layer\n(C) Physical Layer\n(D) Network or transport layer", "output": "(D)"}
